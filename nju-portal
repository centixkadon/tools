#!/usr/bin/env python3

import getpass
import time

import argparse
import requests
from utility import json
from utility import logging


class Timer:
  def __init__(self, interval):
    self.interval = interval

    self.__time = 0

  def wait(self):
    while True:
      now = time.time()
      if self.__time <= now:
        self.__time = time.time() + self.interval
        break
      time.sleep(self.__time - now)


class IpAddress:
  def __init__(self, value):
    if isinstance(value, int):
      self.__version = 4
      self.__address = [value // (256 ** (3 - i)) % 256 for i in range(4)]

  def __repr__(self):
    if self.__version == 4:
      return ".".join([str(x) for x in self.__address])


class Balance:
  def __init__(self, value):
    self.__balance = int(value)

  def __repr__(self):
    return f"{self.__balance / 100:.2f}"

  def __int__(self):
    return self.__balance


class Volume:
  def __init__(self, value):
    self.__volume = int(value)

  def __repr__(self):
    return ":".join([str(self.__volume // (60 ** (2 - i)) % (60 if i else 744)) for i in range(3)])

  def __int__(self):
    return self.__volume



class Portal:
  def __init__(self, *args, command, username, password, request_interval, loop, loop_interval, force, level, **kwargs):
    self.origin = "http://p.nju.edu.cn/portal_io"
    self.headers = {}
    self.timeout = (3.1, 15.1)

    self.username = username
    self.password = password

    self._request_timer = Timer(request_interval)

    loop_timer = Timer(loop_interval)

    self.level = level

    self.location()

    if command == "info":
      while True:
        loop_timer.wait()
        self.info()

        if self.username_loggedin:
          self.volume()

        if not loop:
          break
    elif command == "logout":
      while True:
        loop_timer.wait()
        self.info()

        if not self.username_loggedin:
          self.logout()

        if self.username_loggedin:
          self.volume()

        if not loop:
          break
    elif command == "login":
      self.username = self.username or input("username: ").lower()
      self.password = self.password or getpass.getpass("password: ")
      logging.info("account: {}".format({"username": self.username, "password": self.password}))

      while True:
        loop_timer.wait()
        self.info()

        if force and self.username_loggedin and self.username != self.username_loggedin:
          self.logout()
        if not self.username_loggedin:
          self.login()

        if self.username_loggedin:
          self.volume()

        if not loop:
          break


  def location(self):
    response = self.post("getipoeinfo")
    ipoe = response.ipoe

    self._last_location = {
      "svlan": ipoe.svlan(),
      "pvlan": ipoe.pvlan(),
    }
    return self._last_location

  def info(self):
    response = self.post("getinfo")
    # /getinfo: {'reply_code': 2, 'reply_msg': '无用户portal信息', 'request_uri': '/portal_io/getinfo', 'request_time': 1581063226}

    info = {
      "username": None
    }
    if response.reply_code() == 0:
      userinfo = response.userinfo
      self._balance = userinfo.balance()
      info = {
        "username": userinfo.username().lower(),
        "fullname": userinfo.fullname(),
        "clientip": IpAddress(userinfo.useripv4()),
        "balance": Balance(self._balance),
      }
    self.username_loggedin = info["username"]

    self._last_info = info
    return self._last_info

  def volume(self):
    volume = {}
    if self.username_loggedin:
      response = self.post("selfservice/volume/getlist")

      reply_code = response.reply_code()
      if reply_code in [0, 9]:
        total_volume = response.rows[0].total_ipv4_volume() or 0
        min_balance = max(0, self._balance - max(0, 130 * 60 - max(30 * 60, total_volume)) // 3)
        max_volume = total_volume + self._balance * 3 * 60
        max_volume = max_volume if max_volume < 130 * 60 else -1
        volume = {
          "username": self.username_loggedin,
          "volume": Volume(total_volume),
          "min_balance": Balance(min_balance),
          "max_volume": Volume(max_volume),
        }

      if reply_code != 0:
        logging.warning(f"reply_code: {reply_code}, reply_msg: {response.reply_msg()}")

    self._last_volume = volume
    return self._last_volume

  def login(self):
    response = self.post("login", data={"username": self.username, "password": self.password})
    # /login: {'reply_code': 3, 'reply_msg': 'E011 您的账户余额不足!', 'request_uri': '/portal_io/login', 'request_time': 1581063228}

    reply_code = response.reply_code()
    if reply_code == 6:
      self.username_loggedin = response.userinfo.username().lower()

    if reply_code != 6:
      (logging.error if reply_code in [3, 8] else logging.warning)(f"reply_code: {reply_code}, reply_msg: {response.reply_msg()}")

  def logout(self):
    response = self.post("logout")

    self.username_loggedin = None


  @property
  def username_loggedin(self):
    return self.__username_loggedin

  @username_loggedin.setter
  def username_loggedin(self, value):
    if self.level >= logging.CRITICAL and self.__username_loggedin != username:
      print(username)
    self.__username_loggedin = value


  def post(self, pathname, data=None):
    response = None

    try:
      with requests.Session() as s:
        s.headers.update(self.headers)

        self._request_timer.wait()
        r = s.post(f"{self.origin}/{pathname}", data=data, timeout=self.timeout)
        r.raise_for_status()

        if r.status_code == 200:
          response = r.json()
    except requests.Timeout as e:
      logging.warning(f"timeout: {e}")
    except requests.HTTPError as e:
      logging.warning(f"httperr: {e}")
    except json.JSONDecodeError:
      logging.warning(f"jsonerr: {e}")
    except Exception as e:
      logging.error(f"catch exception: {e}")

    if response is None:
      logging.warning("response json set to '{}'")
      response = {}

    logging.debug(f"/{pathname}: {response}")
    return json.json(response)


  def _watch(self, prefix, name, value):
    if name.startswith(prefix):
      if getattr(self, name, None) != value:
        logging.info(f"{name[len(prefix) :]}: {value}")

  def __setattr__(self, name, value):
    self._watch("_last_", name, value)
    super().__setattr__(name, value)



def main():
  defaultLevel = logging.WARNING
  logging.addLevelNames()

  parser = argparse.ArgumentParser(description="Manage login/logout portal in Nanjing University.", epilog="Template epilog.")
  parser.add_argument("-V", "--version", action="version", version="%(prog)s 0.2")
  parser.add_argument("-q", "--quiet", help=f"set log level up to {', '.join([logging.getLevelName(level) for level in range(defaultLevel + 10, 60, 10)])} (default {logging.getLevelName(defaultLevel)})", action="count", default=0)
  parser.add_argument("-v", "--verbose", help=f"set log level down to {', '.join([logging.getLevelName(level) for level in range(defaultLevel - 10, 0, -10)])} (default {logging.getLevelName(defaultLevel)})", action="count", default=0)

  parser.add_argument("command", help="command for portal (%(choices)s)", choices=["login", "logout", "info"], metavar="COMMAND")
  parser.add_argument("-u", "--username", help="username of portal account")
  parser.add_argument("-p", "--password", help="password of portal account")
  parser.add_argument("--request-interval", help="interval between two requests", type=float, default=1.0)
  parser.add_argument("-l", "--loop", help="loop for command", action="store_true")
  parser.add_argument("--loop-interval", help="interval of loop", type=float, default=300.0)
  parser.add_argument("-f", "--force", help="login even if other user is login", action="store_true")

  args = parser.parse_args()
  args.level = min(max(0, defaultLevel + (args.quiet - args.verbose) * 10), logging.CRITICAL)

  logging.setLevel(args.level)
  logging.info(f"logging level is set to {logging.getLevelName(args.level)}")
  logging.info(f"Arguments: {args}")

  Portal(**args.__dict__)


if __name__ == "__main__":
  main()
