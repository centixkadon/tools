#!/usr/bin/python3

import os
import sys

import logging

import re

import json
import requests



engines = {}
langs = {
  "Afrikaans": ("af", None),
  "Albanian": ("sq", None),
  "Amharic": ("am", None),
  "Arabic": ("ar", "ara"),
  "Armenian": ("hy", None),
  "Azerbaijani": ("az", None),
  "Basque": ("eu", None),
  "Belarusian": ("be", None),
  "Bengali": ("bn", None),
  "Bosnian": ("bs", None),
  "Bulgarian": ("bg", "bul"),
  "Cantonese": (None, "yue"),
  "Catalan": ("ca", None),
  "Cebuano": ("ceb", None),
  "Chichewa": ("ny", None),
  "Chinese (Classical)": (None, "wyw"),
  "Chinese (Simplified)": ("zh-CN", "zh"),
  "Chinese (Traditional)": ("zh-TW", "cht"),
  "Corsican": ("co", None),
  "Croatian": ("hr", None),
  "Czech": ("cs", "cs"),
  "Danish": ("da", "dan"),
  "Dutch": ("nl", "nl"),
  "English": ("en", "en"),
  "Esperanto": ("eo", None),
  "Estonian": ("et", "est"),
  "Filipino": ("tl", None),
  "Finnish": ("fi", "fin"),
  "French": ("fr", "fra"),
  "Frisian": ("fy", None),
  "Galician": ("gl", None),
  "Georgian": ("ka", None),
  "German": ("de", "de"),
  "Greek": ("el", "el"),
  "Gujarati": ("gu", None),
  "Haitian Creole": ("ht", None),
  "Hausa": ("ha", None),
  "Hawaiian": ("haw", None),
  "Hebrew": ("iw", None),
  "Hindi": ("hi", None),
  "Hmong": ("hmn", None),
  "Hungarian": ("hu", "hu"),
  "Icelandic": ("is", None),
  "Igbo": ("ig", None),
  "Indonesian": ("id", None),
  "Irish": ("ga", None),
  "Italian": ("it", "it"),
  "Japanese": ("ja", "jp"),
  "Japanese kana": (None, "jpka"),
  "Javanese": ("jw", None),
  "Kannada": ("kn", None),
  "Kazakh": ("kk", None),
  "Khmer": ("km", None),
  "Korean": ("ko", "kor"),
  "Kurdish (Kurmanji)": ("ku", None),
  "Kyrgyz": ("ky", None),
  "Lao": ("lo", None),
  "Latin": ("la", None),
  "Latvian": ("lv", None),
  "Lithuanian": ("lt", None),
  "Luxembourgish": ("lb", None),
  "Macedonian": ("mk", None),
  "Malagasy": ("mg", None),
  "Malay": ("ms", None),
  "Malayalam": ("ml", None),
  "Maltese": ("mt", None),
  "Maori": ("mi", None),
  "Marathi": ("mr", None),
  "Mongolian": ("mn", None),
  "Myanmar (Burmese)": ("my", None),
  "Nepali": ("ne", None),
  "Norwegian": ("no", None),
  "Pashto": ("ps", None),
  "Persian": ("fa", None),
  "Polish": ("pl", "pl"),
  "Portuguese": ("pt", "pt"),
  "Punjabi": ("pa", None),
  "Romanian": ("ro", "rom"),
  "Russian": ("ru", "ru"),
  "Samoan": ("sm", None),
  "Scots Gaelic": ("gd", None),
  "Serbian": ("sr", None),
  "Sesotho": ("st", None),
  "Shona": ("sn", None),
  "Sindhi": ("sd", None),
  "Sinhala": ("si", None),
  "Slovak": ("sk", None),
  "Slovenian": ("sl", "slo"),
  "Somali": ("so", None),
  "Spanish": ("es", "spa"),
  "Sundanese": ("su", None),
  "Swahili": ("sw", None),
  "Swedish": ("sv", "swe"),
  "Tajik": ("tg", None),
  "Tamil": ("ta", None),
  "Telugu": ("te", None),
  "Thai": ("th", "th"),
  "Turkish": ("tr", None),
  "Ukrainian": ("uk", None),
  "Urdu": ("ur", None),
  "Uzbek": ("uz", None),
  "Vietnamese": ("vi", "vie"),
  "Welsh": ("cy", None),
  "Xhosa": ("xh", None),
  "Yiddish": ("yi", None),
  "Yoruba": ("yo", None),
  "Zulu": ("zu", None),
}

engineDefault = "baidu"
fromDefault = "Chinese (Simplified)"
toDefault = "English"



class CrawlerError(Exception):
  def name(self):
    return type(self).__name__
class JsonError(CrawlerError):
  pass



class Json(dict):
  def __init__(self, filename, *args, **kwargs):
    super().__init__(*args, **kwargs)

    self.__filename = filename
    if os.path.exists(self.__filename):
      with open(self.__filename, "r", encoding="utf-8") as f:
        try:
          self.update(json.load(f))
        except json.decoder.JSONDecodeError as e:
          raise JsonError(e)

  def flush(self):
    with open(self.__filename, "w", encoding="utf-8") as f:
      json.dump(self, f, ensure_ascii=False)



class Engine:
  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)

    self.s = requests.Session()
    self.s.headers.update(Json("../headers.json")["headers"])

  def __enter__(self):
    self.s = type(self.s).__enter__(self.s)
    return self

  def __exit__(self, *args):
    return type(self.s).__exit__(self.s, *args)

  def translate(self, query, fromLang="zh", toLang="en"):
    return "Please select a corrent translation engine."

  def _sign(self, r):
    """
    function n(r,o){
      for(var t=0;t<o.length-2;t+=3){
        var a=o.charAt(t+2);
        a=a>="a"?a.charCodeAt(0)-87:Number(a),
        a="+"===o.charAt(t+1)?r>>>a:r<<a,
        r="+"===o.charAt(t)?r+a&4294967295:r^a
      }
      return r
    }
    function e(r){
      var o=r.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g);
      if(null===o){
        var t=r.length;
        t>30&&(r=""+r.substr(0,10)+r.substr(Math.floor(t/2)-5,10)+r.substr(-10,10))
      }else{
        for(var e=r.split(/[\uD800-\uDBFF][\uDC00-\uDFFF]/),C=0,h=e.length,f=[];h>C;C++)
          ""!==e[C]&&f.push.apply(f,a(e[C].split(""))),
          C!==h-1&&f.push(o[C]);
        var g=f.length;
        g>30&&(r=f.slice(0,10).join("")+f.slice(Math.floor(g/2)-5,Math.floor(g/2)+5).join("")+f.slice(-10).join(""))
      }
      var u=void 0,
      l=""+String.fromCharCode(103)+String.fromCharCode(116)+String.fromCharCode(107);
      u=null!==i?i:(i=window[l]||"")||"";
      for(var d=u.split("."),m=Number(d[0])||0,s=Number(d[1])||0,S=[],c=0,v=0;v<r.length;v++){
        var A=r.charCodeAt(v);
        128>A?S[c++]=A:(2048>A?S[c++]=A>>6|192:(55296===(64512&A)&&v+1<r.length&&56320===(64512&r.charCodeAt(v+1))?(A=65536+((1023&A)<<10)+(1023&r.charCodeAt(++v)),S[c++]=A>>18|240,S[c++]=A>>12&63|128):S[c++]=A>>12|224,S[c++]=A>>6&63|128),S[c++]=63&A|128)
      }
      for(var p=m,F=""+String.fromCharCode(43)+String.fromCharCode(45)+String.fromCharCode(97)+(""+String.fromCharCode(94)+String.fromCharCode(43)+String.fromCharCode(54)),D=""+String.fromCharCode(43)+String.fromCharCode(45)+String.fromCharCode(51)+(""+String.fromCharCode(94)+String.fromCharCode(43)+String.fromCharCode(98))+(""+String.fromCharCode(43)+String.fromCharCode(45)+String.fromCharCode(102)),b=0;b<S.length;b++)
        p+=S[b],
        p=n(p,F);
      return p=n(p,D),p^=s,0>p&&(p=(2147483647&p)+2147483648),p%=1e6,p.toString()+"."+(p^m)
    }
    """
    def n(r, o):
      for t in o:
        a = t[2]
        a = a - 87 if a >= ord("a") else int(chr(a))
        a = r >> a if ord("+") == t[1] else r << a
        r = r + a & 4294967295 if ord("+") == t[0] else r ^ a
      return r
    def e(r):
      m, s = self.i
      S = []
      for v in range(len(r)):
        A = ord(r[v])
        if 128 > A:
          S.append(A)
        elif 2048 > A:
          S.append(A >> 6 | 192)
        else:
          if 55296 == (64512 & A) and v + 1 < len(r) and 56320 == (64512 & ord(r[v + 1])):
            v += 1
            A = 65536 + ((1023 & A) << 10) + (1023 & ord(r[v]))
            S.append(A >> 18 | 240)
            S.append(A >> 12 & 63 | 128)
          else:
            S.append(A >> 12 | 224)
            S.append(A >> 6 & 63 | 128)
          S.append(63 & A | 128)
      p = m
      for b in S:
        p += b
        p = n(p, [(43, 45, 97), (94, 43, 54)])
      p = n(p, [(43, 45, 51), (94, 43, 98), (43, 45, 102)])
      p ^= s
      p %= 1000000
      return "{}.{}".format(p, p ^ m)
    return e(r)

  def _code(self, lang):
    return langs[lang][list(engines.keys()).index(type(self).__name__.lower())]

  def _fromCode(self):
    return self._code(fromDefault)

  def _toCode(self):
    return self._code(toDefault)


def engineclass(cls):
  engines.update({cls.__name__.lower(): cls})
  return cls

@engineclass
class Google(Engine):
  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)

    self.i = (432493, 1331979669)

  def __enter__(self):
    super().__enter__()

    self.params = {
      "client": "webapp",
      "sl": None,
      "tl": None,
      "dt": "t",
      "tk": None,
      "q": None,
    }
    return self

  def close(self):
    self.s.close()

  def translate(self, query, fromLang=None, toLang=None):
    self.params.update({
      "sl": fromLang or self._fromCode(),
      "tl": toLang or self._toCode(),
      "tk": self._sign(query),
      "q": query,
    })
    trans = json.loads(self.s.get("https://translate.google.cn/translate_a/single", params=self.params).text)
    logging.info(trans)
    return trans[0][0][0]


@engineclass
class Baidu(Engine):
  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)

    self.i = (320305, 131321201)

  def __enter__(self):
    super().__enter__()

    self.s.get("https://fanyi.baidu.com/")
    token = re.findall(r"token: '(.*?)'", self.s.get("https://fanyi.baidu.com/").text)[0]
    self.data = {
      "from": None,
      "to": None,
      "query": None,
      "sign": None,
      "token": token,
    }
    return self

  def close(self):
    self.s.close()

  def translate(self, query, fromLang=None, toLang=None):
    self.data.update({
      "from": fromLang or self._fromCode(),
      "to": toLang or self._toCode(),
      "query": query,
      "sign": self._sign(query),
    })
    trans = json.loads(self.s.post("https://fanyi.baidu.com/v2transapi", data=self.data).text)
    logging.info(trans)
    return trans["trans_result"]["data"][0]["dst"]

  def _sign(self, r):
    if len(r) > 30:
      k = len(r) // 2 - 5
      r = r[:10] + r[k: k + 10] + r[-10:]
    return super()._sign(r)



def printHelp(engine=None):
  print("usage:")
  print("  {} QUERY [ENGINE [FROM TO]]      # Translate".format(sys.argv[0]))
  print("  {} - ENGINE                      # Print help of selected engine".format(sys.argv[0]))
  print("options:")
  print("  QUERY            The string to be translated")
  print("  ENGINE           Translation engine (default is {})".format(engineDefault))
  for e in engines:
    print("                     {}".format(e))
  print("  FROM             The language translate from (default is {})".format(fromDefault))
  print("  TO               The language translate to (default is {})".format(toDefault))
  if engine is not None:
    print("language of {}:".format(engine))
    if engine in engines:
      index = list(engines.keys()).index(engine)
      [print("  {:16} {}".format(codes[index], lang)) for lang, codes in langs.items() if codes[index]]
    else:
      print("  Not contain such engine")


def main(query, engine, fromLang, toLang):
  with engines[engine]() as e:
    print(e.translate(query, fromLang, toLang))


if __name__ == "__main__":
  logging.basicConfig(level=logging.ERROR, format="%(asctime)s %(levelname)s - %(message)s")

  if len(sys.argv) > 1:
    query = sys.argv[1]
    if query == "-":
      engine = None
      if len(sys.argv) > 2:
        engine = sys.argv[2]
      printHelp(engine)
    else:
      engine = engineDefault
      fromLang = None
      toLang = None
      if len(sys.argv) > 2:
        engine = sys.argv[2]
      if len(sys.argv) > 4:
        fromLang = sys.argv[3]
        toLang = sys.argv[4]
      main(query, engine, fromLang, toLang)
  else:
    printHelp()
